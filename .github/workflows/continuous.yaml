---
name: Continuous Suite
on:
  - push

jobs:
  starting-notification:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Python 3.7
        uses: actions/setup-python@v1
        with: 
          python-version: '3.7'
      - name: Send Slack Message
        run: |
          pip3 install slack-sdk
          python3 ./build/slack/notifyStart.py
        env:
          SLACK_BOT_TOKEN: "${{secrets.CI_SLACK_BOT_TOKEN}}"
          TARGET_SLACK_CHANNEL: "${{secrets.TARGET_SLACK_CHANNEL}}"

  ending-notification:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: 
      - selenium-allsuites-local
      - selenium-pageloadsuite-local
      - selenium-pageloadsuite-sauce
      - selenium-readersuite-local
      # - pytest-cluster
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Python 3.7
        uses: actions/setup-python@v1
        with: 
          python-version: '3.7'

      - name: Define BUILD_RESULT_SUBDIR
        run: echo "BUILD_RESULT_SUBDIR=${GITHUB_SHA:0:8}" >> $GITHUB_ENV
        if: ${{ always() }}

      - name: Send Slack Message
        run: |
          pip3 install slack-sdk
          python3 ./build/slack/notifyEnd.py
        env:
          # I might have to list the available result files until I build a proper frontend
          SLACK_BOT_TOKEN: "${{secrets.CI_SLACK_BOT_TOKEN}}"
          TEST_RESULTS_LINK: "https://buildresults.sefaria.org/${{env.BUILD_RESULT_SUBDIR}}"
          TARGET_SLACK_CHANNEL: "${{secrets.TARGET_SLACK_CHANNEL}}"

  jest-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          npm install
          npm run build-prod
      - run: ls
      - run: pwd
      - name: Run Jest Tests
        run: npm run jest-travis
      - name: Handle Jest Test Results # later, upload
        run: cat /home/runner/jestResults.json
        if: ${{ always() }}
      

      - name: Authenticate GHA Runner to GCP
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCS_BUILD_UPLOAD_KEY }}
          project_id: ${{ secrets.BUILD_UPLOAD_PROJECT }}
        if: ${{ always() }}

      - name: Define BUILD_RESULT_SUBDIR
        run: echo "BUILD_RESULT_SUBDIR=${GITHUB_SHA:0:8}" >> $GITHUB_ENV
        if: ${{ always() }}

      - name: Upload Build Results
        run: gsutil cp /home/runner/jestResults.json gs://${{secrets.GCS_BUILD_UPLOAD_BUCKET}}/${{env.BUILD_RESULT_SUBDIR}}/jestResults.json
        if: ${{ always() }}

  sandbox-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Python 3.7
        uses: actions/setup-python@v1
        with: 
          python-version: '3.7'

      - name: Authenticate GHA Runner to GCP
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.DEV_CLOUDBUILD_SA_KEY }}
          project_id: ${{ secrets.DEV_PROJECT }}

      - name: Define GITHUB_SHA_SHORT
        run: echo "GITHUB_SHA_SHORT=${GITHUB_SHA:0:6}" >> $GITHUB_ENV

      - name: Submit Build Job to Cloud Build
        # This should use the 'arbitrary commit' build script
        # should these sandboxes be available to the public? probably not -- don't give them public IP addresses
        run: ./build/ci/create-ci-sandbox.bash
        env:
          GIT_COMMIT: "$GITHUB_SHA"
          GKE_CLUSTER: "${{secrets.DEV_GKE_CLUSTER}}"
          GKE_NAMESPACE: "${{secrets.DEV_SANDBOX_NAMESPACE}}"
          GKE_REGION: "${{secrets.DEV_GKE_REGION}}"
          MONGO_HOST: "${{secrets.DEV_MONGO_HOST}}"
          POSTGRES_HOST: "${{secrets.DEV_POSTGRES_HOST}}"
          SANDBOX_NAME: "${GITHUB_SHA}"
          SANDBOX_SUBDOMAIN: "${{secrets.DEV_SANDBOX_SUBDOMAIN}}"
          GCP_PROJECT: "${{secrets.DEV_GCP_PROJECT}}"
          CONTAINER_IMAGE_TAG: "${{env.GITHUB_SHA_SHORT}}"

  sandbox-ready:
    needs: sandbox-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Wait for test sandbox to become available 
        # https://gist.github.com/rgl/f90ff293d56dbb0a1e0f7e7e89a81f42
        # Add a timeout
        run: ./build/ci/waitForSandbox.bash
        env:
          WAIT_DURATION: "3000"

  selenium-pageloadsuite-local:
    # Start off with local firefox
    name: "Selenium: PageLoad Suite on Local Linux Firefox"
    needs: sandbox-ready
    runs-on: ubuntu-latest
    services: 
      selenium:
        image: selenium/standalone-firefox:3.141.59
        ports: [ "4444:4444" ]
        volumes: ["/dev/shm:/dev/shm"]
    steps:

      # BEGIN SETUP
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Set Up Python 3
        uses: actions/setup-python@v1
        with: 
          python-version: '3.7'  

      # Set Up Connection to Dev Mongo
      # 1. Auth to cluster
      # 2. Open encrypted connection
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.DEV_CLOUDBUILD_SA_KEY }}
          project_id: ${{ secrets.DEV_PROJECT }}

      - name: Authenticate GHA Runner To Target Cluster
        run: gcloud container clusters get-credentials ${{secrets.DEV_GKE_CLUSTER}} --zone ${{secrets.DEV_GKE_REGION}} --project ${{secrets.DEV_GCP_PROJECT}}

      - name: Establish MongoDB Connection
        run: kubectl port-forward svc/mongo 27017:27017 &
      
      - name: Await MongoDB Connection
        run: sleep 20

      - name: Confirm MongoDB Connection
        # The following command returns a success code if mongo is available,
        # and a failure code if it is not
        run: curl localhost:27017

      - name: Establish PostgreSQL Connection
        run: kubectl port-forward svc/postgres 5432:5432 &

      - name: Await MongoDB Connection
        run: sleep 20

      - name: Confirm PostgreSQL Connection
        # if the PostgreSQL server is available, curl will fail with a '52' exit code
        # if it is NOT available, it will fail with a '7' exit code
        # run: curl localhost:5432; if [ $? -eq "52" ]; then exit 0; else exit 1; fi
        run: exitCode=$(curl localhost:5432; echo $?); if [ $exitCode -eq 52 ]; then exit 0; else exit 1; fi


      - name: Define GITHUB_SHA_SHORT
        run: echo "GITHUB_SHA_SHORT=${GITHUB_SHA:0:6}" >> $GITHUB_ENV

      # END SETUP
      - name: Install Python Packages
        run: pip3 install -r ./requirements.txt

      - name: Run PageLoad Suite
        run: python3 ./reader/browsertest/run_local_sel.py --parallel --tests PageloadSuite | tee /home/runner/selenium-pageloadsuite-local.txt
        env:
          CI_RUN: "true"
          CI_URL: https://${{env.GITHUB_SHA_SHORT}}.cauldron.sefaria.org
          LOCAL_SELENIUM_URL: "http://localhost:4444/wd/hub"
          SEFARIA_TEST_PASS: ${{ secrets.SEFARIA_APP_PASS }}
          SEFARIA_TEST_USER: ${{ secrets.SEFARIA_APP_USER }}
          PYTHONPATH: "."
          DJANGO_SETTINGS_MODULE: sefaria.settings

      - name: Authenticate GHA Runner to GCP
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCS_BUILD_UPLOAD_KEY }}
          project_id: ${{ secrets.BUILD_UPLOAD_PROJECT }}
        if: ${{ always() }}

      - name: Define BUILD_RESULT_SUBDIR
        run: echo "BUILD_RESULT_SUBDIR=${GITHUB_SHA:0:8}" >> $GITHUB_ENV
        if: ${{ always() }}

      - name: Upload Build Results
        run: gsutil cp /home/runner/selenium-pageloadsuite-local.txt gs://${{secrets.GCS_BUILD_UPLOAD_BUCKET}}/${{env.BUILD_RESULT_SUBDIR}}/selenium-pageloadsuite-local.txt
        if: ${{ always() }}

  selenium-readersuite-local:
    # Start off with local firefox
    name: "Selenium: Reader Suite on Local Linux Firefox"
    needs: sandbox-ready
    runs-on: ubuntu-latest
    services: 
      selenium:
        image: selenium/standalone-firefox:3.141.59
        ports: [ "4444:4444" ]
        volumes: ["/dev/shm:/dev/shm"]
    steps:

      # BEGIN SETUP
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Set Up Python 3
        uses: actions/setup-python@v1
        with: 
          python-version: '3.7'  

      # Set Up Connection to Dev Mongo
      # 1. Auth to cluster
      # 2. Open encrypted connection
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.DEV_CLOUDBUILD_SA_KEY }}
          project_id: ${{ secrets.DEV_PROJECT }}

      - name: Authenticate GHA Runner To Target Cluster
        run: gcloud container clusters get-credentials ${{secrets.DEV_GKE_CLUSTER}} --zone ${{secrets.DEV_GKE_REGION}} --project ${{secrets.DEV_GCP_PROJECT}}

      - name: Establish MongoDB Connection
        run: kubectl port-forward svc/mongo 27017:27017 &
      
      - name: Await MongoDB Connection
        run: sleep 20

      - name: Confirm MongoDB Connection
        # The following command returns a success code if mongo is available,
        # and a failure code if it is not
        run: curl localhost:27017

      - name: Establish PostgreSQL Connection
        run: kubectl port-forward svc/postgres 5432:5432 &

      - name: Await MongoDB Connection
        run: sleep 20

      - name: Confirm PostgreSQL Connection
        # if the PostgreSQL server is available, curl will fail with a '52' exit code
        # if it is NOT available, it will fail with a '7' exit code
        # run: curl localhost:5432; if [ $? -eq "52" ]; then exit 0; else exit 1; fi
        run: exitCode=$(curl localhost:5432; echo $?); if [ $exitCode -eq 52 ]; then exit 0; else exit 1; fi


      - name: Define GITHUB_SHA_SHORT
        run: echo "GITHUB_SHA_SHORT=${GITHUB_SHA:0:6}" >> $GITHUB_ENV

      # END SETUP
      - name: Install Python Packages
        run: pip3 install -r ./requirements.txt

      - name: Run PageLoad Suite
        run: python3 ./reader/browsertest/run_local_sel.py --parallel --tests ReaderSuite | tee /home/runner/selenium-readersuite-local.txt
        env:
          CI_RUN: "true"
          CI_URL: https://${{env.GITHUB_SHA_SHORT}}.cauldron.sefaria.org
          LOCAL_SELENIUM_URL: "http://localhost:4444/wd/hub"
          SEFARIA_TEST_PASS: ${{ secrets.SEFARIA_APP_PASS }}
          SEFARIA_TEST_USER: ${{ secrets.SEFARIA_APP_USER }}
          PYTHONPATH: "."
          DJANGO_SETTINGS_MODULE: sefaria.settings

      - name: Authenticate GHA Runner to GCP
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCS_BUILD_UPLOAD_KEY }}
          project_id: ${{ secrets.BUILD_UPLOAD_PROJECT }}
        if: ${{ always() }}

      - name: Define BUILD_RESULT_SUBDIR
        run: echo "BUILD_RESULT_SUBDIR=${GITHUB_SHA:0:8}" >> $GITHUB_ENV
        if: ${{ always() }}

      - name: Upload Build Results
        run: gsutil cp /home/runner/selenium-readersuite-local.txt gs://${{secrets.GCS_BUILD_UPLOAD_BUCKET}}/${{env.BUILD_RESULT_SUBDIR}}/selenium-readersuite-local.txt
        if: ${{ always() }}

  selenium-allsuites-local:
    # Start off with local firefox
    name: "Selenium: All Default tests on Local Linux Firefox"
    needs: sandbox-ready
    runs-on: ubuntu-latest
    services: 
      selenium:
        image: selenium/standalone-firefox:3.141.59
        ports: [ "4444:4444" ]
        volumes: ["/dev/shm:/dev/shm"]
    steps:

      # BEGIN SETUP
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Set Up Python 3
        uses: actions/setup-python@v1
        with: 
          python-version: '3.7'  

      # Set Up Connection to Dev Mongo
      # 1. Auth to cluster
      # 2. Open encrypted connection
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.DEV_CLOUDBUILD_SA_KEY }}
          project_id: ${{ secrets.DEV_PROJECT }}

      - name: Authenticate GHA Runner To Target Cluster
        run: gcloud container clusters get-credentials ${{secrets.DEV_GKE_CLUSTER}} --zone ${{secrets.DEV_GKE_REGION}} --project ${{secrets.DEV_GCP_PROJECT}}

      - name: Establish MongoDB Connection
        run: kubectl port-forward svc/mongo 27017:27017 &
      
      - name: Await MongoDB Connection
        run: sleep 20

      - name: Confirm MongoDB Connection
        # The following command returns a success code if mongo is available,
        # and a failure code if it is not
        run: curl localhost:27017

      - name: Establish PostgreSQL Connection
        run: kubectl port-forward svc/postgres 5432:5432 &

      - name: Await MongoDB Connection
        run: sleep 20

      - name: Confirm PostgreSQL Connection
        # if the PostgreSQL server is available, curl will fail with a '52' exit code
        # if it is NOT available, it will fail with a '7' exit code
        # run: curl localhost:5432; if [ $? -eq "52" ]; then exit 0; else exit 1; fi
        run: exitCode=$(curl localhost:5432; echo $?); if [ $exitCode -eq 52 ]; then exit 0; else exit 1; fi


      - name: Define GITHUB_SHA_SHORT
        run: echo "GITHUB_SHA_SHORT=${GITHUB_SHA:0:6}" >> $GITHUB_ENV

      # END SETUP
      - name: Install Python Packages
        run: pip3 install -r ./requirements.txt

      - name: Run PageLoad Suite
        run: python3 ./reader/browsertest/run_local_sel.py --parallel | tee /home/runner/selenium-allsuites-local.txt
        env:
          CI_RUN: "true"
          CI_URL: https://${{env.GITHUB_SHA_SHORT}}.cauldron.sefaria.org
          LOCAL_SELENIUM_URL: "http://localhost:4444/wd/hub"
          SEFARIA_TEST_PASS: ${{ secrets.SEFARIA_APP_PASS }}
          SEFARIA_TEST_USER: ${{ secrets.SEFARIA_APP_USER }}
          PYTHONPATH: "."
          DJANGO_SETTINGS_MODULE: sefaria.settings

      - name: Authenticate GHA Runner to GCP
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCS_BUILD_UPLOAD_KEY }}
          project_id: ${{ secrets.BUILD_UPLOAD_PROJECT }}
        if: ${{ always() }}

      - name: Define BUILD_RESULT_SUBDIR
        run: echo "BUILD_RESULT_SUBDIR=${GITHUB_SHA:0:8}" >> $GITHUB_ENV
        if: ${{ always() }}

      - name: Upload Build Results
        run: gsutil cp /home/runner/selenium-allsuites-local.txt gs://${{secrets.GCS_BUILD_UPLOAD_BUCKET}}/${{env.BUILD_RESULT_SUBDIR}}/selenium-allsuites-local.txt
        if: ${{ always() }}

  selenium-pageloadsuite-sauce:
    name: "Selenium: PageLoad Suite on Sauce Labs Firefox"
    needs: sandbox-ready
    runs-on: ubuntu-latest

    steps:

      # BEGIN SETUP
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Set Up Python 3
        uses: actions/setup-python@v1
        with: 
          python-version: '3.7'  

      # Set Up Connection to Dev Mongo
      # 1. Auth to cluster
      # 2. Open encrypted connection
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.DEV_CLOUDBUILD_SA_KEY }}
          project_id: ${{ secrets.DEV_PROJECT }}

      - name: Authenticate GHA Runner To Target Cluster
        run: gcloud container clusters get-credentials ${{secrets.DEV_GKE_CLUSTER}} --zone ${{secrets.DEV_GKE_REGION}} --project ${{secrets.DEV_GCP_PROJECT}}

      - name: Establish MongoDB Connection
        run: kubectl port-forward svc/mongo 27017:27017 &
      
      - name: Await MongoDB Connection
        run: sleep 20

      - name: Confirm MongoDB Connection
        # The following command returns a success code if mongo is available,
        # and a failure code if it is not
        run: curl localhost:27017

      - name: Establish PostgreSQL Connection
        run: kubectl port-forward svc/postgres 5432:5432 &

      - name: Await MongoDB Connection
        run: sleep 20

      - name: Confirm PostgreSQL Connection
        # if the PostgreSQL server is available, curl will fail with a '52' exit code
        # if it is NOT available, it will fail with a '7' exit code
        # run: curl localhost:5432; if [ $? -eq "52" ]; then exit 0; else exit 1; fi
        run: exitCode=$(curl localhost:5432; echo $?); if [ $exitCode -eq 52 ]; then exit 0; else exit 1; fi

      - name: Define GITHUB_SHA_SHORT
        run: echo "GITHUB_SHA_SHORT=${GITHUB_SHA:0:6}" >> $GITHUB_ENV


      # END SETUP
      - name: Install Python Packages
        run: pip3 install -r ./requirements.txt

      - name: Run PageLoad Suite
        run: python3 ./reader/browsertest/run_tests_on_github.py --tests PageloadSuite | tee /home/runner/selenium-pageloadsuite-sauce.txt
        env:
          SAUCE_USERNAME: ${{ secrets.SAUCE_USERNAME }}
          SAUCE_ACCESS_KEY: ${{ secrets.SAUCE_ACCESS_KEY }}
          CI_RUN: "true"
          CI_URL: https://${{env.GITHUB_SHA_SHORT}}.cauldron.sefaria.org
          SEFARIA_TEST_PASS: ${{ secrets.SEFARIA_APP_PASS }}
          SEFARIA_TEST_USER: ${{ secrets.SEFARIA_APP_USER }}
          PYTHONPATH: "."
          DJANGO_SETTINGS_MODULE: sefaria.settings

      - name: Authenticate GHA Runner to GCP
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCS_BUILD_UPLOAD_KEY }}
          project_id: ${{ secrets.BUILD_UPLOAD_PROJECT }}
        if: ${{ always() }}

      - name: Define BUILD_RESULT_SUBDIR
        run: echo "BUILD_RESULT_SUBDIR=${GITHUB_SHA:0:8}" >> $GITHUB_ENV
        if: ${{ always() }}

      - name: Upload Build Results
        run: gsutil cp /home/runner/selenium-pageloadsuite-sauce.txt gs://${{secrets.GCS_BUILD_UPLOAD_BUCKET}}/${{env.BUILD_RESULT_SUBDIR}}/selenium-pageloadsuite-sauce.txt
        if: ${{ always() }}

  # pytest-cluster:
  #   name: "Run PyTests on the cluster"
  #   needs: sandbox-ready
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Set Up Connection to Dev Mongo
  #     # 1. Auth to cluster
  #     # 2. Open encrypted connection
  #     - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
  #       with:
  #         service_account_key: ${{ secrets.DEV_CLOUDBUILD_SA_KEY }}
  #         project_id: ${{ secrets.DEV_PROJECT }}

  #     - name: Set Up Python 3
  #       uses: actions/setup-python@v1
  #       with: 
  #         python-version: '3.7'  

  #     - name: Install jq
  #       run: pip3 install jq

  #     - name: Define GITHUB_SHA_SHORT
  #       run: echo "GITHUB_SHA_SHORT=${GITHUB_SHA:0:6}" >> $GITHUB_ENV

  #     - name: Authenticate GHA Runner To Target Cluster
  #       run: gcloud container clusters get-credentials ${{secrets.DEV_GKE_CLUSTER}} --zone ${{secrets.DEV_GKE_REGION}} --project ${{secrets.DEV_GCP_PROJECT}}

  #     - name: Get Container Name
  #       run: echo "PYTEST_POD_NAME=$(kubectl get pods --selector=app=web-${{env.GITHUB_SHA_SHORT}} -o json | jq -r '.items[0].metadata.name')" >> $GITHUB_ENV
      
  #     - name: Run PyTest
  #       run: kubectl exec ${{env.PYTEST_POD_NAME}} -- bash -c 'CI_RUN=true; pytest -v -m "not deep and not failing"' | tee /home/runner/pytestResults.txt

  #     - name: Handle PyTest output
  #       run: cat /home/runner/pytestResults.txt # later, upload
  #       if: ${{ always() }}

  #     - name: Authenticate GHA Runner to GCP
  #       uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
  #       with:
  #         service_account_key: ${{ secrets.GCS_BUILD_UPLOAD_KEY }}
  #         project_id: ${{ secrets.BUILD_UPLOAD_PROJECT }}
  #       if: ${{ always() }}

  #     - name: Define BUILD_RESULT_SUBDIR
  #       run: echo "BUILD_RESULT_SUBDIR=${GITHUB_SHA:0:8}" >> $GITHUB_ENV
  #       if: ${{ always() }}

  #     - name: Upload Build Results
  #       run: gsutil cp /home/runner/pytestResults.txt gs://${{secrets.GCS_BUILD_UPLOAD_BUCKET}}/${{env.BUILD_RESULT_SUBDIR}}/pytestResults.txt
  #       if: ${{ always() }}

  start-test-pod:
    name: "Start Standalone Testing pod"
    needs: 
      - sandbox-ready
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # Set Up Connection to Dev Mongo
      # 1. Auth to cluster
      # 2. Open encrypted connection
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.DEV_CLOUDBUILD_SA_KEY }}
          project_id: ${{ secrets.DEV_PROJECT }}

      - name: Authenticate GHA Runner To Target Cluster
        run: gcloud container clusters get-credentials ${{secrets.DEV_GKE_CLUSTER}} --zone ${{secrets.DEV_GKE_REGION}} --project ${{secrets.DEV_GCP_PROJECT}}
      - name: Define GITHUB_SHA_SHORT
        run: echo "GITHUB_SHA_SHORT=${GITHUB_SHA:0:6}" >> $GITHUB_ENV
      - name: Start Pod
        run: envsubst '${DEPLOY_ENV},${WEB_IMAGE_NAME},${WEB_IMAGE_TAG},${TIMESTAMP}' < ./build/ci/pyTestPod.yaml | kubectl apply -f -
        env:
          DEPLOY_ENV: ${{env.GITHUB_SHA_SHORT}}
          WEB_IMAGE_NAME: gcr.io/${{secrets.DEV_PROJECT}}/sefaria-web-dev
          WEB_IMAGE_TAG: ${{env.GITHUB_SHA_SHORT}}
          TIMESTAMP: ${{env.GITHUB_SHA_SHORT}} # temp

  delete-test-pod:
    name: "Delete Standalone Testing Pod"
    if: ${{ always() }}
    needs: 
      - pytest-dedicated-pod
      # - djangotests-dedicated-pod
    runs-on: ubuntu-latest
    steps:
      # Set Up Connection to Dev Mongo
      # 1. Auth to cluster
      # 2. Open encrypted connection
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.DEV_CLOUDBUILD_SA_KEY }}
          project_id: ${{ secrets.DEV_PROJECT }}

      - name: Authenticate GHA Runner To Target Cluster
        run: gcloud container clusters get-credentials ${{secrets.DEV_GKE_CLUSTER}} --zone ${{secrets.DEV_GKE_REGION}} --project ${{secrets.DEV_GCP_PROJECT}}

      - name: Define GITHUB_SHA_SHORT
        run: echo "GITHUB_SHA_SHORT=${GITHUB_SHA:0:6}" >> $GITHUB_ENV

      - name: Delete Pod
        run: kubectl delete pods --selector=ci-pod-test-name=${{env.GITHUB_SHA_SHORT}}

  pytest-dedicated-pod:
    name: "Run PyTest Suite on dedicated pod"
    needs:
      - start-test-pod
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # Set Up Connection to Dev Mongo
      # 1. Auth to cluster
      # 2. Open encrypted connection
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.DEV_CLOUDBUILD_SA_KEY }}
          project_id: ${{ secrets.DEV_PROJECT }}

      - name: Set Up Python 3
        uses: actions/setup-python@v1
        with: 
          python-version: '3.7'  

      - name: Install jq
        run: pip3 install jq

      - name: Define GITHUB_SHA_SHORT
        run: echo "GITHUB_SHA_SHORT=${GITHUB_SHA:0:6}" >> $GITHUB_ENV

      - name: Authenticate GHA Runner To Target Cluster
        run: gcloud container clusters get-credentials ${{secrets.DEV_GKE_CLUSTER}} --zone ${{secrets.DEV_GKE_REGION}} --project ${{secrets.DEV_GCP_PROJECT}}

      - name: Get Pod Name
        run: echo "PYTEST_POD_NAME=$(kubectl get pods --selector=ci-pod-test-name=${{env.GITHUB_SHA_SHORT}} -o json | jq -r '.items[0].metadata.name')" >> $GITHUB_ENV
      
      - name: Wait For Pod To Be Ready
        run: ./build/ci/waitForPod.bash
        env: 
          POD_NAME: ${{env.PYTEST_POD_NAME}}
          WAIT_DURATION: "900"

      - name: Run PyTest
        run: kubectl exec ${{env.PYTEST_POD_NAME}} -- bash -c 'CI_RUN=true; pip3 install pytest-django; pytest -v -m "not deep and not failing"' ./sefaria | tee /home/runner/pytestResultsPod.txt

      - name: Authenticate GHA Runner to GCP
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCS_BUILD_UPLOAD_KEY }}
          project_id: ${{ secrets.BUILD_UPLOAD_PROJECT }}
        if: ${{ always() }}

      - name: Define BUILD_RESULT_SUBDIR
        run: echo "BUILD_RESULT_SUBDIR=${GITHUB_SHA:0:8}" >> $GITHUB_ENV
        if: ${{ always() }}

      - name: Upload Build Results
        run: gsutil cp /home/runner/pytestResultsPod.txt gs://${{secrets.GCS_BUILD_UPLOAD_BUCKET}}/${{env.BUILD_RESULT_SUBDIR}}/pytestResultsPod.txt
        if: ${{ always() }}

  sandbox-cleanup:
    name: "Clean up CI Sandbox"
    if: ${{ always() }}
    needs: 
      - selenium-allsuites-local
      - selenium-pageloadsuite-local
      - selenium-pageloadsuite-sauce
      - selenium-readersuite-local
      #- pytest-cluster
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout
        uses: actions/checkout@v2

      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.DEV_CLOUDBUILD_SA_KEY }}
          project_id: ${{ secrets.DEV_PROJECT }}

      - name: Delete sandbox after tests are finished
        run: ./build/ci/destroy-ci-sandbox.bash
        env:
          GKE_CLUSTER: "${{secrets.DEV_GKE_CLUSTER}}"
          GCP_PROJECT: "${{secrets.DEV_GCP_PROJECT}}"
          GKE_REGION: "${{secrets.DEV_GKE_REGION}}"
          SANDBOX_SUBDOMAIN: "${{secrets.DEV_SANDBOX_SUBDOMAIN}}"
          GKE_NAMESPACE: "${{secrets.DEV_SANDBOX_NAMESPACE}}"

  prepare-report-bucket:
    name: "Prepare Build Report"
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Authenticate GHA Runner to GCP
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCS_BUILD_UPLOAD_KEY }}
          project_id: ${{ secrets.BUILD_UPLOAD_PROJECT }}
        if: ${{ always() }}

      - name: Define BUILD_RESULT_SUBDIR
        run: echo "BUILD_RESULT_SUBDIR=${GITHUB_SHA:0:8}" >> $GITHUB_ENV
        if: ${{ always() }}

      - name: Upload Build Results
        run: gsutil cp ./build/ci/report.html gs://${{secrets.GCS_BUILD_UPLOAD_BUCKET}}/${{env.BUILD_RESULT_SUBDIR}}/report.html
        if: ${{ always() }}
...