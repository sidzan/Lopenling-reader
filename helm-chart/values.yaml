---
# Need to pass $BUILD_ID to this key when applying the helm chart in CI. 
# or 
# Set the commit hash for a particular buiild to deploy built image for that commit ID. (NOTE: This would work only if the image is built for that commit ID.)
releaseImageTag: 

# Setting this to true will make this a sandbox environment. It'll set the following:
# - nodeAffinity for the Monitor, Nodejs, Redis, Varnish, Web & Nginx pod to schedule opn node where preemptible=true
# - Set appropriate labels to Nginx pod
# - Requests images with the tag "sandbox-<releaseImageTag>"
sandbox: "false"
# Setting this to true setsup liveness, readiness & startup probes on the web pod. 
contentSandbox: "false"

# This value sets the name of the environment and it's associated objects. Some suggestions for the values are prod/dev/test
deployEnv: "dev" 

# Helps create services for nginx, nodeja, varnish and web pods with appropriate tags that help ArgoCD do blue green deployments.
previousServicesCount: "3"

# This is the project ID for images coming from gcr. Ther are two possible values for this currently development-205018 / production-deployment.
# Should pass ${PROJECT_ID} value to this when applying the helm chart in the CI pipeline.
projectID: development-205018 

# This is used in mongobackup & reindex-elasticsearch cron jobs.
slackWebhook: ""

web:
  containerImage: 
    repoLocation: gcr.io
    repoName: sefaria-web
  replicaCount: 1
  resources:
    web:
      gunicornWorkerCount: 1
      gunicornThreadCount: 1
      request:
        memory: "3Gi"
        cpu: "500m"
      limit:
        memory: "4Gi"
        cpu: "1500m"
    djangoLog:
      request:
        memory: "100Mi"
        cpu: "50m"
      limit:
        memory: "150Mi"
        cpu: "100m"
  secrets:
    googleClient: 
    backupManager: 
      key:
      serviceAccount:
    logging:
      prod: 
      dev: 
    schoolLookup:

redis:
  replicaCount: 1
  resources:
    request:
      memory: "250Mi"
      cpu: "100m"
    limit:
      memory: "500Mi"
      cpu: "120m"

nodejs:
  containerImage: 
    repoLocation: gcr.io
    RepoName: sefaria-node
  replicaCount: 1
  resources:
    request:
      memory: "400Mi"
      cpu: "200m"
    limit:
      memory: "600Mi"
      cpu: "400m"

varnish:
  containerImage:
    repoLocation: gcr.io
    RepoName: sefaria-varnish
    tag: v6
  logging: {}
  replicaCount: 1
  resources:
    request:
      memory: "25Mi" # must be in megabibytes, because we pass it into the malloc definition
      cpu: "10m"
    limit:
      memory: "300Mi"
      cpu: "100m"
  tuning:
    # malloc should be ~75% of the memory request.
    malloc: "250m"
    nuke_limit: "400"
    # Threading
    # http://book.varnish-software.com/4.0/chapters/Tuning.html#details-of-threading-parameters
    thread_pools: 2 # Default: 2
    thread_pool_max: 5000 # Default: 5000; should be a function of resources.request.memory
    thread_pool_min: 100 # Default: 100
    # Timers
    # http://book.varnish-software.com/4.0/chapters/Tuning.html#timers
    first_byte_timeout: 90 # Default 60s
    between_bytes_timeout: 90 # Default 60s
  secrets:
    varnish:

ingress:
  hosts: # You can set parth: serviceName: and port: for each host. By default they are set to '/*', 'nginx', '80' for each. Do note that changing this means you'll have to change the nginx service as well.
    - host: "{{ .Values.deployEnv }}.sefaria.org"
      path: /*
      serviceName: nginx
      port: 80
    - host: "{{ .Values.deployEnv }}.sefaria.org.il"
    - host: sefaria.org
    - host: sefaria.org.il
    - host: www.sefaria.org
    - host: www.sefaria.org.il
    - host: rollout.sefaria.org

nginx:
  containerImage: 
    repoLocation: gcr.io
    repoName: sefaria-asset
  replicaCount: 1
  resources:
    request:
      memory: "200Mi"
      cpu: "80m"
    limit:
      memory: "300Mi"
      cpu: "150m"

monitor:
  containerImage: 
    repoLocation: gcr.io
    repoName: sefaria-web
  replicaCount: 1
  resources:
    request:
      memory: "300Mi"
      cpu: "50m"
    limit:
      memory: "400Mi"
      cpu: "100m" 

secrets:
  localSettings: 
...
