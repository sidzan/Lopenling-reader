---
# Need to pass $BUILD_ID to this key when applying the helm chart in CI. 
# or 
# Set the commit hash for a particular buiild to deploy built image for that commit ID. (NOTE: This would work only if the image is built for that commit ID.)
releaseImageTag: 

# Setting this to true will make this a sandbox environment. It'll set the following:
# - nodeAffinity for the Monitor, Nodejs, Redis, Varnish, Web & Nginx pod to schedule opn node where preemptible=true
# - Set appropriate labels to Nginx pod
# - Requests images with the tag "sandbox-<releaseImageTag>"
sandbox: "false"
# Setting this to true setsup liveness, readiness & startup probes on the web pod. 
contentSandbox: "false"

# This value sets the name of the environment and it's associated objects. Some suggestions for the values are prod/dev/test
deployEnv: "dev" 

# Helps create services for nginx, nodeja, varnish and web pods with appropriate tags that help ArgoCD do blue green deployments.
previousServicesCount: "3"

web:
  containerImage: 
    imageRegistry: gcr.io/production-deployment/sefaria-web # Full path of the image registry imclusive of the image name
    tag: # Commit id of the repo for which the image build has been triggered.
  replicaCount: 1
  resources:
    web:
      gunicornWorkerCount: 1
      gunicornThreadCount: 1
      request:
        memory: "3Gi"
        cpu: "500m"
      limit:
        memory: "4Gi"
        cpu: "1500m"
    djangoLog:
      request:
        memory: "100Mi"
        cpu: "50m"
      limit:
        memory: "150Mi"
        cpu: "100m"
  secrets:
    googleClient:
      data: # for local testing purposes or CI pipeline use input a value
      ref: # Reference to an existing secret in the cluster
    logging:
      ref: # Reference to an existing secret in the cluster
      data: # for local testing purposes or CI pipeline use input a value
    schoolLookup:
      ref: # Reference to an existing secret in the cluster
      data: # for local testing purposes or CI pipeline use input a value

redis:
  containerImage:
    imageRegistry: redis # Full path of the image registry inclusive of the image name
    tag: latest # Version of varnish that's required for the application.
  replicaCount: 1
  resources:
    request:
      memory: "250Mi"
      cpu: "100m"
    limit:
      memory: "500Mi"
      cpu: "120m"

nodejs:
  containerImage: 
    imageRegistry: gcr.io/production-deployment/sefaria-node # Full path of the image registry inclusive of the image name
    tag: # Commit id of the repo for which the image build has been triggered.
  replicaCount: 1
  resources:
    request:
      memory: "400Mi"
      cpu: "200m"
    limit:
      memory: "600Mi"
      cpu: "400m"

varnish:
  containerImage:
    imageRegistry: gcr.io/production-deployment/sefaria-varnish # Full path of the image registry inclusive of the image name
    tag: v6 # Version of varnish that's required for the application.
  logging: {}
  replicaCount: 1
  resources:
    request:
      memory: "25Mi" # must be in megabibytes, because we pass it into the malloc definition
      cpu: "10m"
    limit:
      memory: "300Mi"
      cpu: "100m"
  tuning:
    # malloc should be ~75% of the memory request.
    malloc: "250m"
    nuke_limit: "400"
    # Threading
    # http://book.varnish-software.com/4.0/chapters/Tuning.html#details-of-threading-parameters
    thread_pools: 2 # Default: 2
    thread_pool_max: 5000 # Default: 5000; should be a function of resources.request.memory
    thread_pool_min: 100 # Default: 100
    # Timers
    # http://book.varnish-software.com/4.0/chapters/Tuning.html#timers
    first_byte_timeout: 90 # Default 60s
    between_bytes_timeout: 90 # Default 60s
  secrets:
    varnish:
      ref: # Reference to an existing secret in the cluster
      data: # for local testing purposes or CI pipeline use input a value 

ingress:
  hosts: # You can set path: serviceName: and port: for each host. By default they are set to '/*', 'nginx', '80' respectively for each. Do note that changing this means you'll have to change the nginx service as well.
    - host: "{{ .Values.deployEnv }}.sefaria.org"
      path: /*
      serviceName: nginx
      port: 80
    - host: "{{ .Values.deployEnv }}.sefaria.org.il"
    - host: sefaria.org
    - host: sefaria.org.il
    - host: www.sefaria.org
    - host: www.sefaria.org.il
    - host: rollout.sefaria.org
  secrets:
    # This TLS is referenced for Prod and Democracy deployments. Use the ref: or data: fields for either deployments.
    originTls: 
      ref: # Reference to an existing secret in the cluster 
      cert:
        data: # for local testing purposes or CI pipeline use input a value 
      key: 
        data: # for local testing purposes or CI pipeline use input a value 
    # This TLS is referenced only for Prod deployments.
    originIlTls: 
      ref: # Reference to an existing secret in the cluster 
      cert:
        data: # for local testing purposes or CI pipeline use input a value 
      key: 
        data: # for local testing purposes or CI pipeline use input a value 

nginx:
  containerImage: 
    imageRegistry: gcr.io/production-deployment/sefaria-asset # Full path of the image registry inclusive of the image name
    tag: # Commit id of the repo for which the image build has been triggered.
  replicaCount: 1
  resources:
    request:
      memory: "200Mi"
      cpu: "80m"
    limit:
      memory: "300Mi"
      cpu: "150m"

monitor:
  containerImage: 
    imageRegistry: gcr.io/production-deployment/sefaria-web # Full path of the image registry imclusive of the image name
    tag: # Commit id of the repo for which the image build has been triggered.
  replicaCount: 1
  resources:
    request:
      memory: "300Mi"
      cpu: "50m"
    limit:
      memory: "400Mi"
      cpu: "100m" 

secrets:
  localSettings: 
    ref: 
    # Add the value of these variables in the data: field for local use only. 
    # Also, it is understood that if you're adding one value you're adding variable values 
    DATABASES_HOST:
      data: "test"
    DATABASES_PASS:
      data: "test"
    DATABASES_USER:
      data: "test"
    DATABASES_PORT:
      data: "test"
    GOOGLE_OAUTH2_CLIENT_ID:
      data: "test"
    GOOGLE_OAUTH2_CLIENT_SECRET:
      data: "test"
    SECRET_KEY:
      data: "test"
    MANDRILL_API_KEY:
      data: "test"
    SEFARIA_DB:
      data: "test"
    SEFARIA_DB_USER:
      data: "test"
    SEFARIA_DB_PASSWORD:
      data: "test"
    SEARCH_ADMIN_USER:
      data: "test"
    SEARCH_ADMIN_PW:
      data: "test"
    SEARCH_ADMIN_K8S:
      data: "test"
    TURN_SECRET:
      data: "test"
    TURN_USER:
      data: "test"
    SEFARIA_BOT_API_KEY:
      data: "test"
    CLOUDFLARE_ZONE:
      data: "test"
    CLOUDFLARE_EMAIL:
      data: "test"
    CLOUDFLARE_TOKEN:
      data: "test"
    GOOGLE_TAG_MANAGER_CODE:
      data: "test"
    GOOGLE_ANALYTICS_CODE:
      data: "test"
    GOOGLE_MAPS_API_KEY:
      data: "test"
    MIXPANEL_CODE:
      data: "test"
    HOTJAR_ID:
      data: "test"
    AWS_ACCESS_KEY:
      data: "test"
    AWS_SECRET_KEY:
      data: "test"
    S3_BUCKET:
      data: "test"
    NATIONBUILDER_TOKEN:
      data: "test"
    NATIONBUILDER_CLIENT_ID:
      data: "test"
    NATIONBUILDER_CLIENT_SECRET:
      data: "test"
    MAILCHIMP_API_KEY:
      data: "test"
    MAILCHIMP_ANNOUNCE_ID:
      data: "test"
    MAILCHIMP_WEBHOOK_KEY:
      data: "test"
    RECAPTCHA_PUBLIC_KEY:
      data: "test"
    RECAPTCHA_PRIVATE_KEY:
      data: "test"
    SIMPLE_JWT_SIGNING_KEY:
      data: "test"
    MOBILE_APP_KEY:
      data: "test"
  backupManager: 
    ref:
    key:
      data: "test"
    serviceAccount:
      data: "test"
  slackWebhook: # This is used in mongobackup & reindex-elasticsearch cron jobs.
    ref: 
    data: "test"

localSettings:
  DEBUG: False
  DOMAIN_LANGUAGE:
    https://www.sefaria.org: english
    https://www.sefaria.org.il: hebrew
  MONGO_HOST: "mongo"
  APSCHEDULER_NAME: "apscheduler-${ENV_NAME}"
  SEARCH_ADMIN: "http://elasticsearch-data:9200"
  TURN_SERVER: ''
  USE_CLOUDFLARE: true
  FRONT_END_URL: "http://www.sefaria.org" # "http://${ENV_NAME}.sandbox.sefaria.org"
  OFFLINE: False
  DOWN_FOR_MAINTENANCE: False
  MAINTENANCE_MESSAGE: "Sefaria is down for scheduled maintenance. We expect to be back online within 15 minutes. Thank you for your patience."
  GLOBAL_WARNING: False
  GLOBAL_WARNING_MESSAGE: "Sefaria will be in <b>Read-Only</b> mode for scheduled maintenance from 4:45pm-6:45pm Pacific time. Edits will <b>not</b> be saved during that time."
...
