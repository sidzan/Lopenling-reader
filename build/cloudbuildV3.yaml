# This CloudBuild file will build and deploy the application based on 

# This will stop the need to push commits to the k8s-admin repo to deploy the application 

---
# substitition variables can be defined in the trigger definition
substitutions:
  _GCLOUD_PROJECT: production-deployment
  _HELM_RELEASE_NAME_SLUG: preprod
  _HELM_RELEASE_NAME: sefaria-preprod
  _IMAGE__NGINX: sefaria-asset-test  
  _IMAGE__NODEJS: sefaria-node-test
  _IMAGE__WEB: sefaria-web-test
  _TARGET_CLUSTER: preproduction-cluster
  _TARGET_NAMESPACE: default
  _TARGET_REGION: us-central1-a
  _WEB_REPLICAS: "3"
  _K8S_ADMIN_BRANCH: "master"

options:
  machineType: N1_HIGHCPU_8

steps:  

  #
  # Build artifacts
  #
  - name: "gcr.io/cloud-builders/docker"
    args: ["build", "-t", "gcr.io/production-deployment/sefaria-web:$SHORT_SHA", "-f", "build/web/Dockerfile", "."]
    id: web_container
    wait_for: [ "-" ]
  
  - name: "gcr.io/cloud-builders/docker"
    args: ["build", "-t", "gcr.io/production-deployment/sefaria-node:$SHORT_SHA", "-f", "build/node/Dockerfile", "."]
    id: nodejs_container
    wait_for: [ "-" ]

  - name: "gcr.io/cloud-builders/docker"
    args: ["build", "-t", "gcr.io/production-deployment/sefaria-asset:$SHORT_SHA", "-f", "build/nginx/Dockerfile", "--build-arg", "SRC_IMG=gcr.io/production-deployment/sefaria-web:$SHORT_SHA", "."]
    id: nginx_container
    wait_for:
      - web_container

  #
  # Deploy to Kubernetes
  #

  # Clone k8s-admin -- get the `lorenzo/deploy-python3' branch
  - name: "gcr.io/cloud-builders/git"
    args: ['clone', 'https://source.developers.google.com/p/production-deployment/r/k8s-admin', '--branch', '${_K8S_ADMIN_BRANCH}', '--single-branch']
    id: k8s-admin_clone
    wait_for: [ "-" ]

  # Copy local_settings.py into the chart directory. There is no way to inject this with `helm`
  # https://github.com/helm/helm/issues/3276
  # This can also be resolved by parameterizing all setting variables and passing them in
  - name: "gcr.io/production-deployment/cloudbuild-helm:v3.0.2"
    dir: k8s-admin/v2
    id: copy_local_settings_file
    entrypoint: cp
    args: ["-f", "./app_settings/local_settings.${_HELM_RELEASE_NAME_SLUG}.py", "./charts/sefaria/local_settings.py"]
    wait_for:
      - k8s-admin_clone
  
  # Idempotently Install/Upgrade the Helm Release
  - name: "gcr.io/production-deployment/cloudbuild-helm:v3.0.2"
    id: install_chart
    dir: k8s-admin/v2
    args: ["upgrade", "-i", "${_HELM_RELEASE_NAME}", "./charts/sefaria", "--namespace", "${_TARGET_NAMESPACE}", "--set-string", "releaseSlug=${_HELM_RELEASE_NAME_SLUG},releaseImageTag=$SHORT_SHA,web.replicaCount=${_WEB_REPLICAS}", "--debug"]
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=${_TARGET_REGION}'
      - 'CLOUDSDK_CONTAINER_CLUSTER=${_TARGET_CLUSTER}'
      - 'KUBECTL_VERSION=1.14'
      - 'KUBECONFIG=/root/.kube/config'
    wait_for:
      - copy_local_settings_file
      - k8s-admin_clone
      - nginx_container
      - nodejs_container
      - web_container

  #
  # Post-Deploy Tasks
  #
  # NB: Move these into Helm post-deploy hooks or into the application
  # Post Deploy
  - name: 'gcr.io/cloud-builders/kubectl'
    entrypoint: "bash"
    dir: "k8s-admin/scripts"
    args: ["-c", "apt-get -y update && apt-get -y install curl && ./post_deploy.sh $SHORT_SHA-${_HELM_RELEASE_NAME_SLUG}"]
    env:
    - 'CLOUDSDK_COMPUTE_ZONE=${_TARGET_REGION}'
    - 'CLOUDSDK_CONTAINER_CLUSTER=${_TARGET_CLUSTER}'

  # Todo: 
  # * Share /node_modules while having Dockerfiles that call `npm install`
  #   * I want Dockerfiles to be agnostic about their location -- the old
  #     dockerfiles assumed the container was being built on CloudBuild
    
images:
  - "gcr.io/production-deployment/sefaria-asset:$SHORT_SHA"
  - "gcr.io/production-deployment/sefaria-web:$SHORT_SHA"
  - "gcr.io/production-deployment/sefaria-node:$SHORT_SHA"
...
